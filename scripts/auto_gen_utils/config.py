from git import Repo

import os
import six
import urllib3

if 'PYTHON_REQUESTS_DEBUGGING' in os.environ and os.environ.get('PYTHON_REQUESTS_DEBUGGING').lower() in ("yes", "true", "1"):
    import logging
    import httplib

    # Debug logging
    httplib.HTTPConnection.debuglevel = 1

    # These two lines enable debugging at httplib level (requests->urllib3->http.client)
    # You will see the REQUEST, including HEADERS and DATA, and RESPONSE with HEADERS but without DATA.
    # The only thing missing will be the response.body which is not logged.
    try:
        import http.client as http_client
    except ImportError:
        # Python 2
        import httplib as http_client
    http_client.HTTPConnection.debuglevel = 1

    # You must initialize logging, otherwise you'll not see debug output.
    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)
    logger = logging.getLogger("requests.packages.urllib3")
    logger.setLevel(logging.DEBUG)
    logger.propagate = True
    logger = logging.getLogger("requests")
    logger.setLevel(logging.DEBUG) 
    logger.propagate = True
    logger = logging.getLogger("urllib3")
    logger.setLevel(logging.DEBUG)
    logger.propagate = True


# disable warnings for verify=False
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# JIRA REST API v2 documentation:
#  https://docs.atlassian.com/software/jira/docs/api/REST/7.8.0/
JIRA_SERVER = 'https://jira.oci.oraclecorp.com'
JIRA_SERVER_REST_API_VERSION = 2
JIRA_PROJECT = 'DEX-REQUEST'
JIRA_PROJECT_KEY = 'DEXREQ'

JIRA_DEV_STATUS_REST_API_URL_FORMAT = "https://jira.oci.oraclecorp.com/rest/dev-status/1.0/issue/detail?issueId={}&applicationType=stash&dataType=pullrequest"

USERNAME = os.environ.get('JIRA_USERNAME')
PASSWORD = os.environ.get('JIRA_PASSWORD')
JSESSIONID = os.environ.get('JSESSIONID')

JIRA_OPTIONS = {
    'server': JIRA_SERVER,
    'rest_api_version': JIRA_SERVER_REST_API_VERSION,
    'verify': False 
}

IS_DRY_RUN = False

DISABLE_COMMENT_INCORRECT_DATES = False

# Also used for Bitbucket
JIRA_BASIC_AUTH = (USERNAME, PASSWORD)

# SDKs/CLIs
JAVA_SDK_NAME = "JavaSDK"
PYTHON_SDK_NAME = "PythonSDK"
CLI_NAME = "PythonCLI"
RUBY_SDK_NAME = "RubySDK"
GO_SDK_NAME = "GoSDK"
TYPESCRIPT_SDK_NAME = "TypescriptSDK"
DOTNET_SDK_NAME = "DotNetSDK"
TEST_DATA_GEN_NAME = "TestDataGen"
POWERSHELL_NAME = "PowerShell"
LEGACY_JAVA_SDK_NAME = "LegacyJavaSDK"

TOOL_NAMES = [
    JAVA_SDK_NAME,
    PYTHON_SDK_NAME,
    CLI_NAME,
    RUBY_SDK_NAME,
    GO_SDK_NAME,
    TYPESCRIPT_SDK_NAME,
    DOTNET_SDK_NAME,
    POWERSHELL_NAME,
    TEST_DATA_GEN_NAME,
    LEGACY_JAVA_SDK_NAME
]

SDKS_SUPPORTING_REGION_UPDATE = [
    DOTNET_SDK_NAME,
    JAVA_SDK_NAME,
    TYPESCRIPT_SDK_NAME,
    PYTHON_SDK_NAME,
    GO_SDK_NAME,
    RUBY_SDK_NAME
]

# Testing service does not have all of the same behavior as the other tool repos, so it
# is not included in the list of TOOL_NAMES
TESTING_SERVICE_NAME = "TestingService"
TOOL_NAMES_WITH_TESTING_SERVICE = TOOL_NAMES + [TESTING_SERVICE_NAME]

PUBLIC_SPEC_GENERATION_TYPE = "PUBLIC"
PREVIEW_SPEC_GENERATION_TYPE = "PREVIEW"

CLI_REQUIRED_MANUAL_CHANGES_LABEL = "CLI-ManualChangesRequired"
CLI_FAILED_TESTS_LABEL = "CLI-FailedTests"
CLI_MANUAL_CHANGES_LABELS = ["ManualCLIChange", "CLITeamCodingRequested", "ServiceTeamManual"]
BACKWARD_INCOMPATIBLE_CHANGES_LABEL = "BackwardIncompatibleChanges"
CHANGES_NOT_BEHIND_CONDITIONAL_GROUPS_LABEL = "ChangesNotBehindConditionalGroups"

CLI_PR_REQUIRED_LABELS = [
    CLI_REQUIRED_MANUAL_CHANGES_LABEL,
    CLI_FAILED_TESTS_LABEL
]

# Custom Field IDs for status fields in DEXREQ project
CUSTOM_FIELD_NAME_JAVA_SDK_STATUS = 'Status - Java SDK'
CUSTOM_FIELD_NAME_PYTHON_SDK_STATUS = 'Status - Python SDK'
CUSTOM_FIELD_NAME_RUBY_SDK_STATUS = 'Status - Ruby SDK'
CUSTOM_FIELD_NAME_GO_SDK_STATUS = 'Status - Go SDK'
CUSTOM_FIELD_NAME_CLI_STATUS = 'Status - CLI'
CUSTOM_FIELD_NAME_TYPESCRIPT_SDK_STATUS = 'Status - Typescript SDK'
CUSTOM_FIELD_NAME_DOTNET_SDK_STATUS = 'Status - DotNet SDK'
CUSTOM_FIELD_NAME_POWERSHELL_STATUS = 'Status - PowerShell'
CUSTOM_FIELD_NAME_TEST_DATA_STATUS = 'Status - Test Data'
CUSTOM_FIELD_NAME_LEGACY_JAVA_SDK_STATUS = 'Status - Legacy Java SDK'

CUSTOM_FIELD_NAME_FOR_TOOL = {
    JAVA_SDK_NAME:      CUSTOM_FIELD_NAME_JAVA_SDK_STATUS,
    PYTHON_SDK_NAME:    CUSTOM_FIELD_NAME_PYTHON_SDK_STATUS,
    CLI_NAME:           CUSTOM_FIELD_NAME_CLI_STATUS,
    RUBY_SDK_NAME:      CUSTOM_FIELD_NAME_RUBY_SDK_STATUS,
    GO_SDK_NAME:        CUSTOM_FIELD_NAME_GO_SDK_STATUS,
    TYPESCRIPT_SDK_NAME: CUSTOM_FIELD_NAME_TYPESCRIPT_SDK_STATUS,
    DOTNET_SDK_NAME:    CUSTOM_FIELD_NAME_DOTNET_SDK_STATUS,
    POWERSHELL_NAME:     CUSTOM_FIELD_NAME_POWERSHELL_STATUS,
    TEST_DATA_GEN_NAME:      CUSTOM_FIELD_NAME_TEST_DATA_STATUS,
    LEGACY_JAVA_SDK_NAME:   CUSTOM_FIELD_NAME_LEGACY_JAVA_SDK_STATUS
}

# To determine custom field ids, use a query such as:
# https://jira.oci.oraclecorp.com/rest/api/latest/issue/DEXREQ-200?expand=names,renderedFields

# common for preview + public
CUSTOM_FIELD_ID_ARTIFACT_ID = 'customfield_12528'
CUSTOM_FIELD_ID_GROUP_ID = 'customfield_12529'
CUSTOM_FIELD_ID_ARTIFACT_VERSION = 'customfield_12530'
CUSTOM_FIELD_ID_SPEC_LOCATION_IN_ARTIFACT = 'customfield_12531'
CUSTOM_FIELD_ID_SPEC_FRIENDLY_NAME = 'customfield_12532'
CUSTOM_FIELD_ID_SERVICE_SUBDOMAIN = 'customfield_12533'
CUSTOM_FIELD_ID_FEATURE_IDS = 'customfield_12534'
CUSTOM_FIELD_ID_UDX_TICKET = 'customfield_13596'

# public only
CUSTOM_FIELD_ID_PREVIEW_ISSUE = 'customfield_13600'
CUSTOM_FIELD_ID_SDK_CLI_GA_DATE = 'customfield_13448'
CUSTOM_FIELD_ID_CHANGELOG = 'customfield_13599'
CUSTOM_FIELD_ID_ACKNOWLEDGE_RESPONSIBILITIES = 'customfield_13601'
CUSTOM_FIELD_ID_FEATURE_API_IS_PUBLICLY_AVAILABLE = 'customfield_13780'
CUSTOM_FIELD_ID_CLI_CHANGELOG = 'customfield_16306'

# updated for new Status - {TOOL NAME} fields
CUSTOM_FIELD_ID_JAVA_SDK_STATUS = 'customfield_13608'
CUSTOM_FIELD_ID_PYTHON_SDK_STATUS = 'customfield_13611'
CUSTOM_FIELD_ID_RUBY_SDK_STATUS = 'customfield_13609'
CUSTOM_FIELD_ID_GO_SDK_STATUS = 'customfield_13612'
CUSTOM_FIELD_ID_CLI_STATUS = 'customfield_13610'
CUSTOM_FIELD_ID_TYPESCRIPT_SDK_STATUS = 'customfield_17314'
CUSTOM_FIELD_ID_DOTNET_SDK_STATUS = 'customfield_12208'
CUSTOM_FIELD_ID_POWERSHELL_STATUS = 'customfield_18202'
CUSTOM_FIELD_ID_TEST_DATA_STATUS = 'customfield_19500'
CUSTOM_FIELD_ID_LEGACY_JAVA_SDK_STATUS = 'customfield_23500'

CUSTOM_FIELD_ID_FOR_TOOL = {
    JAVA_SDK_NAME:      CUSTOM_FIELD_ID_JAVA_SDK_STATUS,
    PYTHON_SDK_NAME:    CUSTOM_FIELD_ID_PYTHON_SDK_STATUS,
    CLI_NAME:           CUSTOM_FIELD_ID_CLI_STATUS,
    RUBY_SDK_NAME:      CUSTOM_FIELD_ID_RUBY_SDK_STATUS,
    GO_SDK_NAME:        CUSTOM_FIELD_ID_GO_SDK_STATUS,
    TEST_DATA_GEN_NAME: CUSTOM_FIELD_ID_TEST_DATA_STATUS,
    TYPESCRIPT_SDK_NAME: CUSTOM_FIELD_ID_TYPESCRIPT_SDK_STATUS,
    DOTNET_SDK_NAME:    CUSTOM_FIELD_ID_DOTNET_SDK_STATUS,
    POWERSHELL_NAME:    CUSTOM_FIELD_ID_POWERSHELL_STATUS,
    LEGACY_JAVA_SDK_NAME:   CUSTOM_FIELD_ID_LEGACY_JAVA_SDK_STATUS
}

CUSTOM_FIELD_ID_SDK_CLI_GA_DATE = 'customfield_13448'
CUSTOM_FIELD_ID_ISSUE_ROUTING_TAG = 'customfield_13597'
CUSTOM_FIELD_ID_SPRINT = 'customfield_10004'

CUSTOM_FIELD_NAME_FOR_ID = {
    CUSTOM_FIELD_ID_ARTIFACT_ID: 'Spec Artifact Id',
    CUSTOM_FIELD_ID_GROUP_ID: 'Spec Group Id',
    CUSTOM_FIELD_ID_ARTIFACT_VERSION: 'Spec Artifact Version',
    CUSTOM_FIELD_ID_SPEC_LOCATION_IN_ARTIFACT: 'Spec Location in Artifact',
    CUSTOM_FIELD_ID_SPEC_FRIENDLY_NAME: 'Service Friendly Name',
    CUSTOM_FIELD_ID_SERVICE_SUBDOMAIN: 'Service Subdomain',
    CUSTOM_FIELD_ID_FEATURE_IDS: 'Feature id(s)',
    CUSTOM_FIELD_ID_JAVA_SDK_STATUS: 'Status - Java SDK',
    CUSTOM_FIELD_ID_RUBY_SDK_STATUS: 'Status - Ruby SDK',
    CUSTOM_FIELD_ID_GO_SDK_STATUS: 'Status - Go SDK',
    CUSTOM_FIELD_ID_PYTHON_SDK_STATUS: 'Status - Python SDK',
    CUSTOM_FIELD_ID_CLI_STATUS: 'Status - CLI',
    CUSTOM_FIELD_ID_TYPESCRIPT_SDK_STATUS: "Status - Typescript SDK",
    CUSTOM_FIELD_ID_DOTNET_SDK_STATUS: "Status - DotNet SDK",
    CUSTOM_FIELD_ID_POWERSHELL_STATUS: "Status - PowerShell",
    CUSTOM_FIELD_ID_TEST_DATA_STATUS: "Status - Test Data",
    CUSTOM_FIELD_ID_LEGACY_JAVA_SDK_STATUS: "Status - Legacy Java SDK",
    CUSTOM_FIELD_ID_SDK_CLI_GA_DATE: 'SDK/CLI GA Date',
    CUSTOM_FIELD_ID_ISSUE_ROUTING_TAG: 'Issue Routing Tag',
    CUSTOM_FIELD_ID_PREVIEW_ISSUE: 'Preview Issue',
    CUSTOM_FIELD_ID_CHANGELOG: 'CHANGELOG Entry',
    CUSTOM_FIELD_ID_ACKNOWLEDGE_RESPONSIBILITIES: 'Acknowledge Responsibilities',
    CUSTOM_FIELD_ID_FEATURE_API_IS_PUBLICLY_AVAILABLE: 'Feature API is publicly available & un-whitelisted in Prod',
    CUSTOM_FIELD_ID_UDX_TICKET: 'UDX Ticket',
    CUSTOM_FIELD_ID_CLI_CHANGELOG: 'CLI ChangeLog Entry'
}

CUSTOM_FIELD_IDS_READ_FROM_PREVIEW_TICKET = [
    CUSTOM_FIELD_ID_ARTIFACT_ID,
    CUSTOM_FIELD_ID_GROUP_ID,
    CUSTOM_FIELD_ID_ARTIFACT_VERSION,
    CUSTOM_FIELD_ID_SPEC_LOCATION_IN_ARTIFACT,
    CUSTOM_FIELD_ID_SPEC_FRIENDLY_NAME,
    CUSTOM_FIELD_ID_SERVICE_SUBDOMAIN,
    CUSTOM_FIELD_ID_FEATURE_IDS,
    CUSTOM_FIELD_ID_ISSUE_ROUTING_TAG,
    CUSTOM_FIELD_ID_UDX_TICKET,
]

# RubySDK is in 'maintenance mode' and receives limited support owned by the DEX SDK team.
TOOLS_FOR_WHICH_GENERATION_MAY_FAIL = [RUBY_SDK_NAME, TEST_DATA_GEN_NAME, LEGACY_JAVA_SDK_NAME]

# STATUS_READY_FOR_WORK = 'Ready for Work'
STATUS_BACKLOG = 'Backlog'
STATUS_PROCESSING_REQUESTED = 'Processing Requested'
STATUS_IN_PROGRESS = 'In Progress'
STATUS_IN_REVIEW = 'In Review'
STATUS_IN_DESIGN = 'In Design'
STATUS_NEEDS_TRIAGE = 'Needs Triage'
# STATUS_PENDING_MERGE = 'Pending Merge'
STATUS_PROCESSING = 'Processing'
STATUS_PROCESSING_BULK = 'Processing - Bulk'
STATUS_SERVICE_TEAM_FAILURE_INVESTIGATION = 'Service Team Failure Investigation'
STATUS_DEX_SUPPORT_REQUIRED = 'DEX Support Required'
STATUS_SERVICE_TEAM_REVIEW_REQUIRED = 'Service Team Review Required'
STATUS_SERVICE_TEAM_WORK_REQUIRED = 'Service Team Work Required'
STATUS_RELEASE_REQUESTED = 'Release Requested'
STATUS_RELEASE_APPROVED = 'Release Approved'
STATUS_READY_FOR_PREVIEW = 'Ready for Preview'
STATUS_DEX_BULK_REVIEW = 'DEX Bulk Review'
STATUS_TO_DEPLOY = 'To Deploy'
STATUS_DONE = 'Done'
STATUS_WITHDRAWN = 'Withdrawn'
STATUS_NEEDS_TRIAGE_STATUS = 'Needs triage status'
STATUS_CLOSED = 'Closed'
STATUS_MORE_INFORMATION_NEEDED = 'More Information Needed'

CUSTOM_STATUS_TODO = 'To Do'
CUSTOM_STATUS_PROCESSING = 'Processing'
CUSTOM_STATUS_FAILURE = 'Failure'
CUSTOM_STATUS_SUCCESS = 'Success'
CUSTOM_STATUS_DONE = 'Done'

# We expect the Git repos to be checked out relative to the working directory when the scripts auto-gen-utils pipeline scripts are run:
# dexreq repo:     ../dexreq
# Java SDK repo:   ../java-sdk
# Go SDK repo:     ../src/github.com/oracle/oci-go-sdk
# Ruby SDK repo:   ../ruby-sdk
# Python SDK repo: ../python-sdk
# Python SDK repo: ../python-cli
# Testing service: ../oci-testing-service
# Typescript SDK repo: ../oci-typescript-sdk
# DotNet SDK repo: ../oci-dotnet-sdk
# Legacy Java SDK repo : ../legacy-java-sdk

DEXREQ_REPO_NAME = "dexreq"
DEXREQ_DIFF_REPO_RELATIVE_LOCATION = os.path.join('..', 'dexreq')
DEXREQ_REPO = Repo.init(DEXREQ_DIFF_REPO_RELATIVE_LOCATION)

CLI_REPO_RELATIVE_LOCATION = os.path.join('..', 'python-cli')
PYTHON_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'python-sdk')
GO_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'src', 'github.com', 'oracle', 'oci-go-sdk')
JAVA_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'java-sdk')
TYPESCRIPT_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'oci-typescript-sdk')
RUBY_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'ruby-sdk')
DOTNET_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'oci-dotnet-sdk')
POWERSHELL_REPO_RELATIVE_LOCATION = os.path.join('..', 'oci-powershell-modules')
TESTING_SERVICE_REPO_RELATIVE_LOCATION = os.path.join('..', 'oci-testing-service')
TEST_DATA_GEN_REPO_RELATIVE_LOCATION = os.path.join('..', 'sdk-client-test-data')
LEGACY_JAVA_SDK_REPO_RELATIVE_LOCATION = os.path.join('..', 'legacy-java-sdk')

REPO_RELATIVE_LOCATION_FOR_TOOL = {
    JAVA_SDK_NAME:      JAVA_SDK_REPO_RELATIVE_LOCATION,
    PYTHON_SDK_NAME:    PYTHON_SDK_REPO_RELATIVE_LOCATION,
    CLI_NAME:           CLI_REPO_RELATIVE_LOCATION,
    RUBY_SDK_NAME:      RUBY_SDK_REPO_RELATIVE_LOCATION,
    GO_SDK_NAME:        GO_SDK_REPO_RELATIVE_LOCATION,
    TYPESCRIPT_SDK_NAME:    TYPESCRIPT_SDK_REPO_RELATIVE_LOCATION,
    DOTNET_SDK_NAME:    DOTNET_SDK_REPO_RELATIVE_LOCATION,
    POWERSHELL_NAME:    POWERSHELL_REPO_RELATIVE_LOCATION,
    TEST_DATA_GEN_NAME: TEST_DATA_GEN_REPO_RELATIVE_LOCATION,
    LEGACY_JAVA_SDK_NAME: LEGACY_JAVA_SDK_REPO_RELATIVE_LOCATION
}

CLI_REPO = Repo.init(CLI_REPO_RELATIVE_LOCATION)
SDK_REPO = Repo.init(PYTHON_SDK_REPO_RELATIVE_LOCATION)
JAVA_SDK_REPO = Repo.init(JAVA_SDK_REPO_RELATIVE_LOCATION)
RUBY_SDK_REPO = Repo.init(RUBY_SDK_REPO_RELATIVE_LOCATION)
GO_SDK_REPO = Repo.init(GO_SDK_REPO_RELATIVE_LOCATION)
TYPESCRIPT_SDK_REPO = Repo.init(TYPESCRIPT_SDK_REPO_RELATIVE_LOCATION)
DOTNET_SDK_REPO = Repo.init(DOTNET_SDK_REPO_RELATIVE_LOCATION)
POWERSHELL_REPO = Repo.init(POWERSHELL_REPO_RELATIVE_LOCATION)
TESTING_SERVICE_REPO = Repo.init(TESTING_SERVICE_REPO_RELATIVE_LOCATION)
TEST_DATA_GEN_REPO = Repo.init(TEST_DATA_GEN_REPO_RELATIVE_LOCATION)
LEGACY_JAVA_SDK_REPO = Repo.init(LEGACY_JAVA_SDK_REPO_RELATIVE_LOCATION)
REPO_NAMES_FOR_TOOL = {
    JAVA_SDK_NAME:        ["java-sdk"],
    PYTHON_SDK_NAME:      ["python-sdk"],
    CLI_NAME:             ["python-sdk", "python-cli"],
    RUBY_SDK_NAME:        ["ruby-sdk"],
    GO_SDK_NAME:          ["oci-go-sdk"],
    TYPESCRIPT_SDK_NAME:  ["oci-typescript-sdk"],
    DOTNET_SDK_NAME:      ["oci-dotnet-sdk"],
    POWERSHELL_NAME:      ["oci-dotnet-sdk", "oci-powershell-modules"],
    TEST_DATA_GEN_NAME:   ["sdk-client-test-data"],
    TESTING_SERVICE_NAME: ["oci-testing-service"],
    LEGACY_JAVA_SDK_NAME: ["legacy-java-sdk"]
}
REPOS_FOR_TOOL = {
    JAVA_SDK_NAME:        [JAVA_SDK_REPO],
    PYTHON_SDK_NAME:      [SDK_REPO],
    CLI_NAME:             [SDK_REPO, CLI_REPO],
    RUBY_SDK_NAME:        [RUBY_SDK_REPO],
    GO_SDK_NAME:          [GO_SDK_REPO],
    TYPESCRIPT_SDK_NAME:  [TYPESCRIPT_SDK_REPO],
    DOTNET_SDK_NAME:      [DOTNET_SDK_REPO],
    POWERSHELL_NAME:      [DOTNET_SDK_REPO, POWERSHELL_REPO],
    TEST_DATA_GEN_NAME:   [TEST_DATA_GEN_REPO],
    TESTING_SERVICE_NAME: [TESTING_SERVICE_REPO],
    LEGACY_JAVA_SDK_NAME: [LEGACY_JAVA_SDK_REPO]
}

REPO_NAME_TO_PRIMARY_TOOL = {}
for tool, repo_names in six.iteritems(REPO_NAMES_FOR_TOOL):
    REPO_NAME_TO_PRIMARY_TOOL[repo_names[-1]] = tool

# This is for links to generate PRs for the correct repo for the TC jobs with a VCS
# configured to reference a forked repo.
REPO_FOR_LINKS = {
    JAVA_SDK_NAME:      ["java-sdk"],
    PYTHON_SDK_NAME:    ["python-sdk"],
    CLI_NAME:           ["python-sdk", "python-cli"],
    RUBY_SDK_NAME:      ["ruby-sdk-autogen-fork"],
    GO_SDK_NAME:        ["oci-go-sdk"],
    TYPESCRIPT_SDK_NAME:["oci-typescript-sdk-autogen-fork"],
    DOTNET_SDK_NAME:    ["oci-dotnet-sdk-autogen-fork"],
    POWERSHELL_NAME:    ["oci-dotnet-sdk-autogen-fork", "oci-powershell-modules-autogen-fork"],
    TEST_DATA_GEN_NAME: ["sdk-client-test-data-autogen-fork"],
    LEGACY_JAVA_SDK_NAME: ["legacy-java-sdk"]
}

# This is for specifying a target repo to merge to.  It's only required for TC jobs
# with a VCS configured to reference a forked repo with the changes.
# If left as an empty string, the link defaults to use the same repo as the source for the PR.
# To find the repo ID for a given BitBucket Repo:
#   https://bitbucket.oci.oraclecorp.com/rest/api/1.0/projects/SDK/repos/{repo_name}
TARGET_REPO_IDS_FOR_LINKS = {
    JAVA_SDK_NAME:   [""],
    PYTHON_SDK_NAME: [""],
    CLI_NAME:        ["", ""],
    RUBY_SDK_NAME:   ["464"],  # BitBucket's repo ID for ruby-sdk
    GO_SDK_NAME:     [""],
    TYPESCRIPT_SDK_NAME: ["14954"],  # BitBucket's repo ID for oci-typescript-sdk
    DOTNET_SDK_NAME: ["50528"],  # BitBucket's repo ID for oci-dotnet-sdk,
    POWERSHELL_NAME: ["50528", "52679"],
    TEST_DATA_GEN_NAME: ["31489"],  # BitBucket's repo ID for sdk-client-test-data
    LEGACY_JAVA_SDK_NAME: [""]
}

PREVIEW_TICKET_LABEL = "PreviewSDK"
PUBLIC_TICKET_LABEL = "PublicSDK"

PREVIEW_ISSUE_TYPE_NAME = "Preview"
PUBLIC_ISSUE_TYPE_NAME = "Public"

PREVIEW_ISSUE_TYPE_ID = '13122'
PUBLIC_ISSUE_TYPE_ID = '13121'

PULL_REQUEST_STATUS_MERGED = 'MERGED'
PULL_REQUEST_STATUS_OPEN = 'OPEN'
PULL_REQUEST_STATUS_DECLINED = 'DECLINED'

TEMPLATE_TODO_TICKETS_PREVIEW_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND ("{CUSTOM_FIELD_STATUS}" = "To Do")'

TODO_PREVIEW_CLI_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_CLI_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)
TODO_PREVIEW_PYTHON_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_PYTHON_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)
TODO_PREVIEW_JAVA_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_JAVA_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)
TODO_PREVIEW_RUBY_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_RUBY_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)
TODO_PREVIEW_GO_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_GO_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)
TODO_PREVIEW_TYPESCRIPT_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_TYPESCRIPT_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)
TODO_PREVIEW_DOTNET_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_DOTNET_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)

TODO_PREVIEW_POWERSHELL_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_POWERSHELL_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)

TODO_PREVIEW_TEST_DATA_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_TEST_DATA_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)

TODO_PREVIEW_LEGACY_JAVA_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PREVIEW_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_LEGACY_JAVA_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID
)

TEMPLATE_TODO_TICKETS_PUBLIC_JQL = 'project = {JIRA_PROJECT} AND status = "' + STATUS_PROCESSING_REQUESTED + '" AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND ("{CUSTOM_FIELD_STATUS}" = "To Do")'

TODO_PUBLIC_CLI_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_CLI_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_PYTHON_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_PYTHON_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_JAVA_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_JAVA_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_RUBY_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_RUBY_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_GO_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_GO_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_TYPESCRIPT_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_TYPESCRIPT_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_DOTNET_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_DOTNET_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)

TODO_PUBLIC_POWERSHELL_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_POWERSHELL_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)

TODO_PUBLIC_TEST_DATA_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_TEST_DATA_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)
TODO_PUBLIC_LEGACY_JAVA_SDK_TICKETS_JQL = TEMPLATE_TODO_TICKETS_PUBLIC_JQL.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_STATUS=CUSTOM_FIELD_NAME_LEGACY_JAVA_SDK_STATUS,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID
)

TODO_PREVIEW_ALL_TOOLS = ('project = {JIRA_PROJECT} AND resolution = Unresolved AND (status = "{STATUS_PROCESSING_REQUESTED}") AND issuetype = "{ISSUE_TYPE}"').format(
    JIRA_PROJECT=JIRA_PROJECT,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    STATUS_PROCESSING_REQUESTED=STATUS_PROCESSING_REQUESTED
)
TODO_PUBLIC_ALL_TOOLS = ('project = {JIRA_PROJECT} AND resolution = Unresolved AND status = "{STATUS_PROCESSING_REQUESTED}" AND issuetype = "{ISSUE_TYPE}"').format(
    JIRA_PROJECT=JIRA_PROJECT,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID,
    STATUS_PROCESSING_REQUESTED=STATUS_PROCESSING_REQUESTED
)

TODO_PREVIEW_TICKETS_JQL_FOR_TOOL = {
    JAVA_SDK_NAME:   TODO_PREVIEW_JAVA_SDK_TICKETS_JQL,
    PYTHON_SDK_NAME: TODO_PREVIEW_PYTHON_SDK_TICKETS_JQL,
    CLI_NAME:        TODO_PREVIEW_CLI_TICKETS_JQL,
    RUBY_SDK_NAME:   TODO_PREVIEW_RUBY_SDK_TICKETS_JQL,
    GO_SDK_NAME:     TODO_PREVIEW_GO_SDK_TICKETS_JQL,
    TYPESCRIPT_SDK_NAME: TODO_PREVIEW_TYPESCRIPT_SDK_TICKETS_JQL,
    DOTNET_SDK_NAME: TODO_PREVIEW_DOTNET_SDK_TICKETS_JQL,
    POWERSHELL_NAME: TODO_PREVIEW_POWERSHELL_TICKETS_JQL,
    TEST_DATA_GEN_NAME:  TODO_PREVIEW_TEST_DATA_TICKETS_JQL,
    LEGACY_JAVA_SDK_NAME: TODO_PREVIEW_LEGACY_JAVA_SDK_TICKETS_JQL
}

TODO_PUBLIC_TICKETS_JQL_FOR_TOOL = {
    JAVA_SDK_NAME:   TODO_PUBLIC_JAVA_SDK_TICKETS_JQL,
    PYTHON_SDK_NAME: TODO_PUBLIC_PYTHON_SDK_TICKETS_JQL,
    CLI_NAME:        TODO_PUBLIC_CLI_TICKETS_JQL,
    RUBY_SDK_NAME:   TODO_PUBLIC_RUBY_SDK_TICKETS_JQL,
    GO_SDK_NAME:     TODO_PUBLIC_GO_SDK_TICKETS_JQL,
    TYPESCRIPT_SDK_NAME: TODO_PUBLIC_TYPESCRIPT_SDK_TICKETS_JQL,
    DOTNET_SDK_NAME: TODO_PUBLIC_DOTNET_SDK_TICKETS_JQL,
    POWERSHELL_NAME: TODO_PUBLIC_POWERSHELL_TICKETS_JQL,
    TEST_DATA_GEN_NAME:   TODO_PUBLIC_TEST_DATA_TICKETS_JQL,
    LEGACY_JAVA_SDK_NAME: TODO_PUBLIC_LEGACY_JAVA_SDK_TICKETS_JQL
}

READY_FOR_PREVIEW_CLI_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_CLI_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PREVIEW_PYTHON_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_PYTHON_SDK_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PREVIEW_JAVA_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_JAVA_SDK_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PREVIEW_RUBY_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_RUBY_SDK_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PREVIEW_GO_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_GO_SDK_STATUS,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PREVIEW_TYPESCRIPT_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_TYPESCRIPT_SDK_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PREVIEW_DOTNET_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_DOTNET_SDK_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)

READY_FOR_PREVIEW_POWERSHELL_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_POWERSHELL_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)

READY_FOR_PREVIEW_TEST_DATA_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_TEST_DATA_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)

READY_FOR_PREVIEW_LEGACY_JAVA_SDK_TICKETS_JQL = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND "{CUSTOM_FIELD_NAME_PER_TOOL_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}") AND status = "{STATUS_READY_FOR_PREVIEW}"'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    CUSTOM_FIELD_NAME_PER_TOOL_STATUS=CUSTOM_FIELD_NAME_LEGACY_JAVA_SDK_STATUS,
    STATUS=STATUS_READY_FOR_PREVIEW,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS,
    CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)

ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY = " AND ".join(['("{CUSTOM_FIELD_STATUS}" in ("{CUSTOM_STATUS_VALUE_1}", "{CUSTOM_STATUS_VALUE_2}"))'.format(CUSTOM_FIELD_STATUS=custom_status_field, CUSTOM_STATUS_VALUE_1=CUSTOM_STATUS_SUCCESS, CUSTOM_STATUS_VALUE_2=CUSTOM_STATUS_DONE) for _,custom_status_field in six.iteritems(CUSTOM_FIELD_NAME_FOR_TOOL)])
READY_FOR_PREVIEW_ALL_TOOLS = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND status = "{STATUS_READY_FOR_PREVIEW}" AND ({ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY})'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY=ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PUBLIC_ALL_TOOLS = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND status = "{STATUS_RELEASE_APPROVED}" AND ({ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY})'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY=ALL_TOOLS_SUCCESSFUL_PARTIAL_QUERY,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID,
    STATUS_RELEASE_APPROVED=STATUS_RELEASE_APPROVED
)

ANY_TOOLS_TODO_PARTIAL_QUERY = " OR ".join(['("{CUSTOM_FIELD_STATUS}" = "{CUSTOM_STATUS_TODO}")'.format(CUSTOM_FIELD_STATUS=custom_status_field, CUSTOM_STATUS_TODO=CUSTOM_STATUS_TODO) for _,custom_status_field in six.iteritems(CUSTOM_FIELD_NAME_FOR_TOOL)])
READY_FOR_PREVIEW_ANY_TOOLS_REQUESTED = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND (status = "{STATUS_READY_FOR_PREVIEW}") AND ({ANY_TOOLS_TODO_PARTIAL_QUERY})'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    ANY_TOOLS_TODO_PARTIAL_QUERY=ANY_TOOLS_TODO_PARTIAL_QUERY,
    ISSUE_TYPE=PREVIEW_ISSUE_TYPE_ID,
    STATUS_READY_FOR_PREVIEW=STATUS_READY_FOR_PREVIEW
)
READY_FOR_PUBLIC_ANY_TOOLS_REQUESTED = 'project = {JIRA_PROJECT} AND resolution = Unresolved AND issuetype = "{ISSUE_TYPE}" AND (status = "{STATUS_RELEASE_APPROVED}") AND ({ANY_TOOLS_TODO_PARTIAL_QUERY})'.format(
    JIRA_PROJECT=JIRA_PROJECT,
    ANY_TOOLS_TODO_PARTIAL_QUERY=ANY_TOOLS_TODO_PARTIAL_QUERY,
    ISSUE_TYPE=PUBLIC_ISSUE_TYPE_ID,
    STATUS_RELEASE_APPROVED=STATUS_RELEASE_APPROVED
)

READY_FOR_PREVIEW_TICKETS_JQL_FOR_TOOL = {
    JAVA_SDK_NAME:   READY_FOR_PREVIEW_JAVA_SDK_TICKETS_JQL,
    PYTHON_SDK_NAME: READY_FOR_PREVIEW_PYTHON_SDK_TICKETS_JQL,
    CLI_NAME:        READY_FOR_PREVIEW_CLI_TICKETS_JQL,
    RUBY_SDK_NAME:   READY_FOR_PREVIEW_RUBY_SDK_TICKETS_JQL,
    GO_SDK_NAME:     READY_FOR_PREVIEW_GO_SDK_TICKETS_JQL,
    TYPESCRIPT_SDK_NAME: READY_FOR_PREVIEW_TYPESCRIPT_SDK_TICKETS_JQL,
    DOTNET_SDK_NAME: READY_FOR_PREVIEW_DOTNET_SDK_TICKETS_JQL,
    POWERSHELL_NAME: READY_FOR_PREVIEW_POWERSHELL_TICKETS_JQL,
    TEST_DATA_GEN_NAME:   READY_FOR_PREVIEW_TEST_DATA_TICKETS_JQL,
    LEGACY_JAVA_SDK_NAME: READY_FOR_PREVIEW_LEGACY_JAVA_SDK_TICKETS_JQL
}

COMMENT_TYPE_INFO = "INFO"
COMMENT_TYPE_ERROR = "ERROR"
COMMENT_TYPE_SUCCESS = "SUCCESS"

COMMENT_TYPE_TO_COLOR = {
    COMMENT_TYPE_INFO: '#707070',     # gray
    COMMENT_TYPE_ERROR: '#FF0000',    # red
    COMMENT_TYPE_SUCCESS: '#14892c',  # green
}

GENERATION_COMMIT_MESSAGE_PREFIX = 'Running generation for:'
POM_UPDATE_COMMIT_MESSAGE_PREFIX = 'Updating pom.xml for'
SPEC_BASELINE_COMMIT_MESSAGE_PREFIX = 'Spec baseline for'

GENERATION_BRANCH_PREFIX = 'generated'
FAILED_BRANCH_PREFIX = "failed"
SPEC_BRANCH_PREFIX = "spec"  # in DEXREQ repo


def get_debug_dexreq_branch_prefix():
    return (os.environ.get('DEBUG_DEXREQ_BRANCH_PREFIX') or "").lstrip('"').rstrip('"')


def init_branches():
    global DEBUG_DEXREQ_BRANCH_PREFIX
    global BULK_PREVIEW_BRANCH_PREFIX
    global BULK_PUBLIC_BRANCH_PREFIX
    global INDIVIDUAL_PREVIEW_BRANCH_PREFIX
    global INDIVIDUAL_PUBLIC_BRANCH_PREFIX
    global V1_BULK_PREVIEW_BRANCH_PREFIX
    global V1_INDIVIDUAL_PREVIEW_BRANCH_PREFIX
    global V1_INDIVIDUAL_PUBLIC_BRANCH_PREFIX
    global BRANCH_PREFIXES_SAFE_FOR_DELETION

    DEBUG_DEXREQ_BRANCH_PREFIX = get_debug_dexreq_branch_prefix()

    BULK_PREVIEW_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-v2-preview-bulk'
    BULK_PUBLIC_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-v2-public-bulk'
    INDIVIDUAL_PREVIEW_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-v2-preview'
    INDIVIDUAL_PUBLIC_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-v2-public'

    V1_BULK_PREVIEW_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-preview-bulk'
    V1_INDIVIDUAL_PREVIEW_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-preview'
    V1_INDIVIDUAL_PUBLIC_BRANCH_PREFIX = DEBUG_DEXREQ_BRANCH_PREFIX + 'auto-public'

    # only delete branches that match patterns of branches created by auto-gen utils
    BRANCH_PREFIXES_SAFE_FOR_DELETION = [
        BULK_PREVIEW_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, BULK_PREVIEW_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, BULK_PREVIEW_BRANCH_PREFIX),
        '{}-{}'.format(SPEC_BRANCH_PREFIX, BULK_PREVIEW_BRANCH_PREFIX),
        BULK_PUBLIC_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, BULK_PUBLIC_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, BULK_PUBLIC_BRANCH_PREFIX),
        '{}-{}'.format(SPEC_BRANCH_PREFIX, BULK_PUBLIC_BRANCH_PREFIX),
        INDIVIDUAL_PREVIEW_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, INDIVIDUAL_PREVIEW_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, INDIVIDUAL_PREVIEW_BRANCH_PREFIX),
        '{}-{}'.format(SPEC_BRANCH_PREFIX, INDIVIDUAL_PREVIEW_BRANCH_PREFIX),
        INDIVIDUAL_PUBLIC_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, INDIVIDUAL_PUBLIC_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, INDIVIDUAL_PUBLIC_BRANCH_PREFIX),
        '{}-{}'.format(SPEC_BRANCH_PREFIX, INDIVIDUAL_PUBLIC_BRANCH_PREFIX),

        # v1 branches
        V1_BULK_PREVIEW_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, V1_BULK_PREVIEW_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, V1_BULK_PREVIEW_BRANCH_PREFIX),
        V1_INDIVIDUAL_PREVIEW_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, V1_INDIVIDUAL_PREVIEW_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, V1_INDIVIDUAL_PREVIEW_BRANCH_PREFIX),
        V1_INDIVIDUAL_PUBLIC_BRANCH_PREFIX,
        '{}-{}'.format(GENERATION_BRANCH_PREFIX, V1_INDIVIDUAL_PUBLIC_BRANCH_PREFIX),
        '{}-{}'.format(FAILED_BRANCH_PREFIX, V1_INDIVIDUAL_PUBLIC_BRANCH_PREFIX),

        # merge_to_github and merge_from_github branches
        "merge_to_github",
        "merge_from_github",
    ]


init_branches()

# generates individual preview builds for all tickets with CLI Status == 'To Do' or 'None'
BUILD_TYPE_INDIVIDUAL_PREVIEW = 'individual_preview'

# generates one preview build including the changes from all tickets with CLI Status == 'Pending Merge'
# tickets in the 'Pending Merge' state have already built successfully so they can be included in the bulk release
BUILD_TYPE_BULK_PENDING_MERGE_PREVIEW = 'bulk_pending_merge_preview'

# generates individual public builds for all tickets with label 'PublicSDK'
BUILD_TYPE_INDIVIDUAL_PUBLIC = 'individual_public'

# generates one public build including the changes from all tickets wtih CLI Status == 'Pending Merge'
# tickets in the 'Pending Merge' state have already built successfully so they can be included in the bulk release
BUILD_TYPE_BULK_PENDING_MERGE_PUBLIC = 'bulk_pending_merge_public'

PREVIEW_BUILD_TYPES = [BUILD_TYPE_INDIVIDUAL_PREVIEW, BUILD_TYPE_BULK_PENDING_MERGE_PREVIEW]
PUBLIC_BUILD_TYPES = [BUILD_TYPE_INDIVIDUAL_PUBLIC, BUILD_TYPE_BULK_PENDING_MERGE_PUBLIC]
BULK_BUILD_TYPES = [BUILD_TYPE_BULK_PENDING_MERGE_PREVIEW, BUILD_TYPE_BULK_PENDING_MERGE_PUBLIC]

VALID_BUILD_TYPES = [BUILD_TYPE_INDIVIDUAL_PREVIEW,
                     BUILD_TYPE_BULK_PENDING_MERGE_PREVIEW,
                     BUILD_TYPE_INDIVIDUAL_PUBLIC,
                     BUILD_TYPE_BULK_PENDING_MERGE_PUBLIC]

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_CLI = """
h4. *CLI*

[https://artifactory.oci.oraclecorp.com/opc-public-sdk-dev-pypi-local/oci-cli-{full_version}.zip]

This can also be installed by doing:
{{code}}
pip install --trusted-host=artifactory.oci.oraclecorp.com -i https://artifactory.oci.oraclecorp.com/api/pypi/global-dev-pypi/simple -U oci-cli=={full_version}
{{code}}

Customers who don't have Python or other prerequisites installed (or who haven't done the CLI setup before to set up a virtual environment etc.) may find it more convenient to use: [https://artifactory.oci.oraclecorp.com/opc-public-sdk-dev-pypi-local/oci-cli-full-install-{full_version}.zip] as that ZIP contains an install script which install the CLI and any prerequisites.
"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_PYTHON_SDK = """
h4. *Python SDK*
[https://artifactory.oci.oraclecorp.com/opc-public-sdk-dev-pypi-local/oci-python-sdk-{full_version}.zip]

This can also be installed by doing:
{{code}}
pip install --trusted-host=artifactory.oci.oraclecorp.com -i https://artifactory.oci.oraclecorp.com/api/pypi/global-dev-pypi/simple -U oci=={full_version}
{{code}}
"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_GOSDK = """
h4. *Go SDK*

To install the Go SDK, you have to clone the oci-go-sdk Bitbucket repo into your Oracle oci-go-sdk path. Example:
{{code}}
git clone -b preview ssh://git@bitbucket.oci.oraclecorp.com:7999/sdk/oci-go-sdk.git $GOPATH/src/github.com/oracle/oci-go-sdk
cd $GOPATH/src/github.com/oracle/oci-go-sdk
git reset --hard {full_version}
{{code}}
If you would like to preserve your current installation of the oci-go-sdk, consider vendoring in the above repo at commit {full_version}

"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_JAVA_SDK = """
h4. *Java SDK*

[https://artifactory.oci.oraclecorp.com/webapp/#/artifacts/browse/tree/General/{artifactory_repo}/com/oracle/oci/sdk/oci-java-sdk-dist/{short_version}/oci-java-sdk-dist-{full_version}.zip]

If you want to use this in Maven, use:
{{code}}
<dependency>
     <groupId>com.oracle.oci.sdk</groupId>
     <artifactId>oci-java-sdk-shaded-full</artifactId>
     <version>{full_version}</version>
 </dependency>
{{code}}
"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_RUBY_SDK = """
h4. *Ruby SDK*

[https://artifactory.oci.oraclecorp.com/opc-public-sdk-dev-rubygems-local/gems/r2/oci-ruby-sdk-{full_version}.zip]
[https://artifactory.oci.oraclecorp.com/opc-public-sdk-dev-rubygems-local/gems/oci-{full_version}.gem]
"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_TYPESCRIPT_SDK = """
h4. *Typescript SDK*

[https://artifactory.oci.oraclecorp.com/opc-public-sdk-typescript-dev-npm-local/main/oci-sdk-{full_version}.tgz]

This can also be installed by doing:

{{code}}
npm config set https://artifactory.oci.oraclecorp.com/api/npm/global-dev-npm
npm install oci-sdk@{full_version}
{{code}}

"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_DOTNET_SDK = """
h4. *DotNet SDK*

Packages can be found from artifactory with version {full_version}:
[https://artifactory.oci.oraclecorp.com/api/nuget/oci-dex-dev-nuget-local]

Packages can be installed to .NET project by doing:

{{code}}
dotnet nuget add source https://artifactory.oci.oraclecorp.com/api/nuget/oci-dex-dev-nuget-local --name Artifactory
dotnet add package <PACKAGE_ID> -s https://artifactory.oci.oraclecorp.com/api/nuget/oci-dex-dev-nuget-local -v {full_version}
{{code}}

"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_POWERSHELL = """
h4. *PowerShell*

PowerShell modules can be found from artifactory with version {full_version}:
[https://artifactory.oci.oraclecorp.com/api/nuget/oci-psmodules-dev-nuget-local]

PowerShell modules can be installed by doing:

{{code}}
Register-PSRepository -Name Artifactory -SourceLocation https://artifactory.oci.oraclecorp.com/api/nuget/oci-psmodules-dev-nuget-local -PublishLocation https://artifactory.oci.oraclecorp.com/api/nuget/oci-psmodules-dev-nuget-local -InstallationPolicy Trusted
Install-Module -Name <ModuleName> -Repository Artifactory -RequiredVersion "{full_version}"
{{code}}

"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_TESTDATA = """
h4. *TestData*

Test Data have been generated for internal use only.
Example files can be found from artifactory with version {full_version}:
[https://artifactory.oci.oraclecorp.com/sdk-dev-generic-local/examples]

"""

BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_LEGACY_JAVA_SDK = """
h4. *Legacy Java SDK*

[https://artifactory.oci.oraclecorp.com/webapp/#/artifacts/browse/tree/General/{artifactory_repo}/com/oracle/oci/sdk/oci-java-sdk-dist/{short_version}/oci-java-sdk-dist-{full_version}.zip]

If you want to use this in Maven, use:
{{code}}
<dependency>
     <groupId>com.oracle.oci.sdk</groupId>
     <artifactId>oci-java-sdk-shaded-full</artifactId>
     <version>{full_version}</version>
 </dependency>
{{code}}

Note: By default, we are not building weekly release versions of the Legacy Java SDK anymore. If you have to use the Legacy Java SDK and cannot use the above {full_version} timed snapshot version, you may request a new release version in [#oci_public_sdks](https://oracle.enterprise.slack.com/archives/C7HKLGU3E) on Slack.
"""


BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_FOR_TOOL = {
    CLI_NAME:    BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_CLI,
    PYTHON_SDK_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_PYTHON_SDK,
    GO_SDK_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_GOSDK,
    JAVA_SDK_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_JAVA_SDK,
    RUBY_SDK_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_RUBY_SDK,
    TYPESCRIPT_SDK_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_TYPESCRIPT_SDK,
    DOTNET_SDK_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_DOTNET_SDK,
    POWERSHELL_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_POWERSHELL,
    TEST_DATA_GEN_NAME: BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_TESTDATA,
    LEGACY_JAVA_SDK_NAME:  BULK_GENERATION_COMPLETE_COMMENT_TEMPLATE_LEGACY_JAVA_SDK
}

PYTHON_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../python_sdk_generation_success.txt'
CLI_SUCCESS_GENERATION_RELATIVE_LOCATION = '../cli_generation_success.txt'
JAVA_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../java_sdk_generation_success.txt'
RUBY_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../ruby_sdk_generation_success.txt'
GO_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../go_sdk_generation_success.txt'
TYPESCRIPT_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../typescript_sdk_generation_success.txt'
DOTNET_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../dotnet_sdk_generation_success.txt'
POWERSHELL_SUCCESS_GENERATION_RELATIVE_LOCATION = '../powershell_generation_success.txt'
TEST_DATA_SUCCESS_GENERATION_RELATIVE_LOCATION = '../test_data_generation_success.txt'
LEGACY_JAVA_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION = '../legacy_java_sdk_generation_success.txt'

PYTHON_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../python_sdk_build_success.txt'
CLI_SUCCESS_BUILD_RELATIVE_LOCATION = '../cli_build_success.txt'
JAVA_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../java_sdk_build_success.txt'
RUBY_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../ruby_sdk_build_success.txt'
GO_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../go_sdk_build_success.txt'
TYPESCRIPT_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../typescript_sdk_build_success.txt'
DOTNET_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../dotnet_sdk_build_success.txt'
POWERSHELL_SUCCESS_BUILD_RELATIVE_LOCATION = '../powershell_build_success.txt'
TEST_DATA_SUCCESS_BUILD_RELATIVE_LOCATION = '../test_data_build_success.txt'
LEGACY_JAVA_SDK_SUCCESS_BUILD_RELATIVE_LOCATION = '../legacy_java_sdk_build_success.txt'

SUCCESS_GENERATION_FILES_FOR_TOOL = {
    JAVA_SDK_NAME:      [JAVA_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION],
    PYTHON_SDK_NAME:    [PYTHON_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION],
    CLI_NAME:           [PYTHON_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION, CLI_SUCCESS_GENERATION_RELATIVE_LOCATION],
    RUBY_SDK_NAME:      [RUBY_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION],
    GO_SDK_NAME:        [GO_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION],
    TYPESCRIPT_SDK_NAME: [TYPESCRIPT_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION],
    DOTNET_SDK_NAME:    [DOTNET_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION],
    POWERSHELL_NAME:    [DOTNET_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION, POWERSHELL_SUCCESS_GENERATION_RELATIVE_LOCATION],
    TEST_DATA_GEN_NAME: [TEST_DATA_SUCCESS_GENERATION_RELATIVE_LOCATION],
    LEGACY_JAVA_SDK_NAME: [LEGACY_JAVA_SDK_SUCCESS_GENERATION_RELATIVE_LOCATION]
}

SUCCESS_BUILD_FILES_FOR_TOOL = {
    JAVA_SDK_NAME:      [JAVA_SDK_SUCCESS_BUILD_RELATIVE_LOCATION],
    PYTHON_SDK_NAME:    [PYTHON_SDK_SUCCESS_BUILD_RELATIVE_LOCATION],
    CLI_NAME:           [PYTHON_SDK_SUCCESS_BUILD_RELATIVE_LOCATION, CLI_SUCCESS_BUILD_RELATIVE_LOCATION],
    RUBY_SDK_NAME:      [RUBY_SDK_SUCCESS_BUILD_RELATIVE_LOCATION],
    GO_SDK_NAME:        [GO_SDK_SUCCESS_BUILD_RELATIVE_LOCATION],
    TYPESCRIPT_SDK_NAME: [TYPESCRIPT_SDK_SUCCESS_BUILD_RELATIVE_LOCATION],
    DOTNET_SDK_NAME:    [DOTNET_SDK_SUCCESS_BUILD_RELATIVE_LOCATION],
    POWERSHELL_NAME:    [DOTNET_SDK_SUCCESS_BUILD_RELATIVE_LOCATION, POWERSHELL_SUCCESS_BUILD_RELATIVE_LOCATION],
    TEST_DATA_GEN_NAME: [TEST_DATA_SUCCESS_BUILD_RELATIVE_LOCATION],
    LEGACY_JAVA_SDK_NAME: [LEGACY_JAVA_SDK_SUCCESS_BUILD_RELATIVE_LOCATION]
}

# Shared messages

GENERATION_AND_BUILD_SUCCESSFUL_TEMPLATE = 'Generation and build for tool: {tool_name} (repos: {repos}) was successful. Proceeding to next step.'

# Note: if you change this template, add the old value to BUILD_PASS_JIRA_MESSAGE_TEMPLATE_VARIATIONS in autogen_issue_advisor_shared.py
BUILD_PASS_JIRA_MESSAGE_TEMPLATE = """Completed generating tool: {tool_name} (repos: {repos}) {build_description}.

{links}

Artifacts can be found {build_artifacts_link} (for the next 10 days).

For build log and artifact access see the [self-service FAQ|https://confluence.oci.oraclecorp.com/pages/viewpage.action?pageId=132774928#SDK/CLISelfServiceFrequentlyAskedQuestions-HowdoIgetaccesstologsandartifacts?]."""


# Note: if you change this template, add the old value to BUILD_FAIL_JIRA_MESSAGE_TEMPLATE_VARIATIONS in autogen_issue_advisor_shared.py
BUILD_FAIL_JIRA_MESSAGE_TEMPLATE = """Building the change failed for tool: {tool_name} (repos: {repos}) {build_description}.

{links}

If necessary, you can use {branch_text} as a starting point to fix the build (e.g. if you made a breaking change in preview and you now have to change tests or samples).

Information about the failure can be found in the {build_log_link}."""

# Note: if you change this template, add the old value to STEP_FAILED_MESSAGE_TEMPLATE_VARIATIONS in autogen_issue_advisor_shared.py
STEP_FAILED_MESSAGE_TEMPLATE = """{failure_step} for tool: {tool_name} (repos: {repos}) failed.

Information about the failure can be found in the {build_log_link}.

If it is unclear how to resolve the issue, you can set the status to '{dex_support_required_status}' to request help from the SDK / CLI team.{additional_comment}"""

UNPROTECTED_CHANGES_MESSAGE_TEMPLATE = """Note: We detected changes in the spec that were not protected by fresh conditional groups not already enabled in the {pipeline} SDK. This may cause problems for Terraform and is not recommended.

To see the changes that were not behind fresh, not yet enabled conditional conditional groups, click [here|{link}] and then select the "Diff" tab."""

BYPASSED_UNPROTECTED_CHANGES_MESSAGE_TEMPLATE = """Note: We detected changes in the spec that were not protected by fresh conditional groups not already enabled in the {pipeline} SDK. While this may cause problems for Terraform and is not recommended, these changes were accepted using a bypass label.

To see the changes that were not behind conditional groups, click here: {link}"""

SELF_SERVICE_BUG_TEMPLATE = """The job failed while attempting to update pom.xml. {exception}.

The full build log can be found {build_log_link}.

For build log and artifact access see the [self-service FAQ|https://confluence.oci.oraclecorp.com/pages/viewpage.action?pageId=132774928#SDK/CLISelfServiceFrequentlyAskedQuestions-HowdoIgetaccesstologsandartifacts?].

This appears to be a problem with the self-service pipeline; therefore the issue status has been set to 'DEX Support Required', and the SDK / CLI team oncall will take a look."""

#
# For new bypass labels:
# Add description to https://confluence.oci.oraclecorp.com/display/DEX/SDK+Runbook+-+Exceptions+in+Self-Service+Pipeline
#

BYPASS_CHECK_UDX_TICKET_LABEL = "BypassCheck-UDX-Ticket"
BYPASS_CHECK_SPEC_EXTENSION_LABEL = "BypassCheck-Specfile-Extension"
BYPASS_CHECK_FEATURE_ID_LABEL = "BypassCheck-Feature-ID"
BYPASS_CHECK_SERVICE_FRIENDLY_NAME_LABEL = "BypassCheck-Service-Friendly-Name"
BYPASS_CHECK_INTERNAL_TICKET_LABEL = "BypassCheck-Internal-Ticket"
# BypassCheck-PR-master-PythonCLI
# BypassCheck-PR-master-JavaSDK
# BypassCheck-PR-master-PythonSDK
# BypassCheck-PR-master-GoSDK
# BypassCheck-PR-master-TypescriptSDK
# BypassCheck-PR-master-DotNetSDK
# BypassCheck-PR-master-PowerShell
# BypassCheck-PR-master-TestData
# BypassCheck-PR-master-LegacyJavaSDK
BYPASS_CHECK_PR_MASTER_PREFIX = "BypassCheck-PR-master-"
# BypassCheck-PR-build-master-PythonCLI
# BypassCheck-PR-build-master-JavaSDK
# BypassCheck-PR-build-master-PythonSDK
# BypassCheck-PR-build-master-GoSDK
# BypassCheck-PR-build-master-TypescriptSDK
# BypassCheck-PR-build-master-DotNetSDK
# BypassCheck-PR-build-master-PowerShell
# BypassCheck-PR-build-master-TestData
# BypassCheck-PR-build-master-LegacyJavaSDK
BYPASS_CHECK_PR_BUILD_MASTER_PREFIX = "BypassCheck-PR-build-master-"

BYPASS_CLI_DESIGN_REVIEW_CHECK = "BypassCLI-Design-Review"

# For master, we need Java, Python, Go and CLI PRs and successful builds
BYPASS_CHECK_PR_MASTER_LABELS = ["{}{}".format(BYPASS_CHECK_PR_MASTER_PREFIX, tool) for tool in TOOL_NAMES]
BYPASS_CHECK_PR_BUILD_MASTER_LABELS = ["{}{}".format(BYPASS_CHECK_PR_BUILD_MASTER_PREFIX, tool) for tool in TOOL_NAMES]

BYPASS_CHECK_PREVENT_MANUAL_STATUS_CHANGES = "BypassCheck-PreventManualStatusChanges"

BYPASS_CHECK_API_PUBLICLY_AVAILABLE = "BypassCheck-APIPubliclyAvailable"
BYPASS_CHECK_CHANGES_NOT_BEHIND_CONDITIONAL_GROUPS = "BypassCheck-ChangesNotBehindConditionalGroups"

# BypassCheck-Generation-RubySDK <-- Primary use-case to ignore Ruby with exception
BYPASS_CHECK_GENERATION_PREFIX = "BypassCheck-Generation-"
BYPASS_CHECK_GENERATION_LABELS = ["{}{}".format(BYPASS_CHECK_GENERATION_PREFIX, tool) for tool in (TOOLS_FOR_WHICH_GENERATION_MAY_FAIL)]

BYPASS_LABELS = [
    BYPASS_CHECK_UDX_TICKET_LABEL,
    BYPASS_CHECK_SPEC_EXTENSION_LABEL,
    BYPASS_CHECK_FEATURE_ID_LABEL,
    BYPASS_CHECK_SERVICE_FRIENDLY_NAME_LABEL,
    BYPASS_CHECK_PREVENT_MANUAL_STATUS_CHANGES,
    BYPASS_CHECK_API_PUBLICLY_AVAILABLE,
    BYPASS_CLI_DESIGN_REVIEW_CHECK,
    BYPASS_CHECK_CHANGES_NOT_BEHIND_CONDITIONAL_GROUPS,
    BYPASS_CHECK_INTERNAL_TICKET_LABEL
] + BYPASS_CHECK_PR_MASTER_LABELS \
    + BYPASS_CHECK_PR_BUILD_MASTER_LABELS \
    + BYPASS_CHECK_GENERATION_LABELS \

IS_ACTION_ITEM_OF_LINK = 'is action item of'

UDX_TICKET_LINK_RELATIONSHIP = "Required"
UDX_TICKET_DISALLOWED_STATES = ['Done', 'Closed']

CLI_DESIGN_REVIEW_TERMINAL_STATES = [STATUS_DONE, STATUS_WITHDRAWN, STATUS_CLOSED]

BITBUCKET_PR_URL_PREFIX = 'https://bitbucket.oci.oraclecorp.com/projects'


DEXREQ_IGNORED_ISSUES_ENV_VAR_NAME = "DEXREQ_IGNORED_ISSUES"


def init_dexreq_ignored_issues():
    global DEXREQ_IGNORED_ISSUES
    DEXREQ_IGNORED_ISSUES_ENV_VAR = (os.environ.get(DEXREQ_IGNORED_ISSUES_ENV_VAR_NAME) or "").lstrip('"').rstrip('"')
    DEXREQ_IGNORED_ISSUES = [e.strip() for e in DEXREQ_IGNORED_ISSUES_ENV_VAR.split(",")] if DEXREQ_IGNORED_ISSUES_ENV_VAR else []


init_dexreq_ignored_issues()


def should_ignore_issue(issue_key):
    return issue_key in DEXREQ_IGNORED_ISSUES


# TODO: replace this with a group lookup
APPROVED_DEX_TEAM_MEMBERS = [
    # SDK Team
    'Joe Levy',
    'Jyoti Saini',
    'Mathias Ricken',
    'Mingchi Stephen Mak',
    'Omkar Patil',
    'Peng Liu',
    'Yan Sun',
    'Vyas Bhagwat',
    'Walt Tran',
    'Ziyao Qiao',
    'Yash Chandra',
    'Vidhi Bhansali',
    'Anurag Garg',
    'Josh Hunter',
    'Swetha Krishnan',
    'Rakesh Kumar Parappa',
    'Swarnava Sarkar',
    'Ram Kishan Vooka',
    'Nivedita Parihar',
    'Kalpana Ramasamy',
    'Joshua Ramirez',
    'Eric Pendergrass',

    # CLI team
    'Hamada Ibrahim',
    'Kern Lee',
    'Manoj Meda',
    'Mike Ross',
    'Srikanth Reddy Kumbham',
    'Viral Modi',
    'Vishwas Bhat',
    'Harsh Kumar',
    'Arun Swarnam',
    'Varun Mankal',
    'Zhongwan Wang',
    'Alex Le',
    'Mandy Tsai'
]
